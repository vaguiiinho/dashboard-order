#!/bin/bash

# üß™ Script de Setup para Ambiente de Teste
# Este script configura o ambiente de testes integrados

set -e

echo "üß™ Dashboard de Ordens de Servi√ßo - Setup Testes"
echo "==============================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.dev.yml" ]; then
    echo "‚ùå Execute este script a partir do diret√≥rio raiz do projeto"
    exit 1
fi

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Instale o Docker primeiro."
    exit 1
fi

echo "‚úÖ Docker encontrado"

# Parar container de teste existente
echo "üõë Parando container de teste existente..."
docker-compose -f docker-compose.dev.yml down mysql-test 2>/dev/null || true

# Iniciar banco de teste
echo "üóÑÔ∏è Iniciando banco de dados MySQL para testes..."
docker-compose -f docker-compose.dev.yml up -d mysql-test

# Aguardar banco estar pronto
echo "‚è≥ Aguardando banco de teste estar pronto..."
sleep 15

# Verificar se o banco est√° respondendo
echo "üîç Verificando conex√£o com banco de teste..."
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if docker exec dashboard_mysql_test mysqladmin ping -h localhost --silent; then
        echo "‚úÖ Banco de teste est√° respondendo!"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå Timeout: Banco de teste n√£o respondeu ap√≥s $max_attempts tentativas"
        exit 1
    fi
    
    echo "‚è≥ Tentativa $attempt/$max_attempts - Aguardando banco..."
    sleep 2
    ((attempt++))
done

# Configurar banco de teste
echo "üîß Configurando banco de teste..."

# Criar usu√°rio de teste se n√£o existir
docker exec dashboard_mysql_test mysql -u root -prootpassword -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';" 2>/dev/null || true

# Configurar banco e permiss√µes
docker exec dashboard_mysql_test mysql -u root -prootpassword -e "DROP DATABASE IF EXISTS dashboard_order_test;"
docker exec dashboard_mysql_test mysql -u root -prootpassword -e "CREATE DATABASE dashboard_order_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
docker exec dashboard_mysql_test mysql -u root -prootpassword -e "GRANT ALL PRIVILEGES ON dashboard_order_test.* TO 'test_user'@'%';"
docker exec dashboard_mysql_test mysql -u root -prootpassword -e "FLUSH PRIVILEGES;"

echo "‚úÖ Banco de teste configurado!"

# Executar migrations no banco de teste
echo "üöÄ Executando migrations no banco de teste..."
cd backend

# Definir URL do banco de teste
export DATABASE_URL="mysql://test_user:test_password@localhost:3307/dashboard_order_test"

# Executar migrations
npx prisma migrate deploy

echo "‚úÖ Migrations executadas com sucesso!"

cd ..

echo ""
echo "üéâ Ambiente de teste configurado com sucesso!"
echo ""
echo "üß™ Para executar os testes:"
echo "   Todos os testes:    cd backend && npm run test:all"
echo "   Testes unit√°rios:   cd backend && npm run test:unit"
echo "   Testes integra√ß√£o:  cd backend && npm run test:integration"
echo "   Testes reposit√≥rio: cd backend && npm run test:repositories"
echo ""
echo "üåê Banco de teste rodando em:"
echo "   Host: localhost"
echo "   Porta: 3307"
echo "   Database: dashboard_order_test"
echo "   Usu√°rio: test_user"
echo "   Senha: test_password"
